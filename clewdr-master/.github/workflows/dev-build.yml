name: dev-build

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - "frontend/**"
      - ".github/workflows/dev-build.yml"
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Build frontend
        run: |
          cd frontend
          pnpm install
          pnpm run build

      - name: Upload static directory
        uses: actions/upload-artifact@v4
        with:
          name: static-files
          path: static/
          retention-days: 1

  linux:
    name: Build Linux (GNU)
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64
            target_triple: x86_64-unknown-linux-gnu
            apt_packages: ""
          - target: aarch64
            target_triple: aarch64-unknown-linux-gnu
            apt_packages: crossbuild-essential-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install base dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools

      - name: Install target-specific APT dependencies
        if: ${{ matrix.apt_packages != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build for ${{ matrix.target }} (x86_64)
        run: cargo build --release --target ${{ matrix.target_triple }}
        if: ${{ matrix.target == 'x86_64' }}

      - name: Build for ${{ matrix.target }} (aarch64)
        run: cargo build --release --target ${{ matrix.target_triple }}
        env:
          CFLAGS_aarch64_unknown_linux_gnu: -D__ARM_ARCH=8
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-g++
          RUSTC_LINKER: aarch64-linux-gnu-g++
        if: ${{ matrix.target == 'aarch64' }}

      - name: Move artifact to work dir and zip
        run: |
          mv target/${{ matrix.target_triple }}/release/clewdr .
          mkdir -p release-package
          mv clewdr release-package/
          cd release-package
          zip -r ../clewdr-linux-${{ matrix.target }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-linux-${{ matrix.target }}
          path: clewdr-linux-${{ matrix.target }}.zip
          retention-days: 1

  android:
    name: Build Android (NDK)
    needs: build-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64
            target_triple: aarch64-linux-android
            apt_packages: ""

    steps:
      - uses: actions/checkout@v4
      - uses: nttld/setup-ndk@v1.5.0
        id: setup-ndk
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Install base dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools

      - name: Install target-specific APT dependencies
        if: ${{ matrix.apt_packages != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build for ${{ matrix.target }}
        run: |
          cargo install cargo-ndk
          cargo ndk --target ${{ matrix.target_triple }} build --release
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Move artifact to work dir and zip
        run: |
          mv target/${{ matrix.target_triple }}/release/clewdr .
          mv $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so .
          mkdir -p release-package
          mv clewdr libc++_shared.so release-package/
          cd release-package
          zip -r ../clewdr-android-${{ matrix.target }} .
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-android-${{ matrix.target }}
          path: clewdr-android-${{ matrix.target }}.zip
          retention-days: 1

  musllinux-x86_64:
    name: Build Linux x86_64 (musl)
    needs: build-frontend
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools musl-dev zip

      - name: Add Rust target
        run: rustup target add x86_64-unknown-linux-musl

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build for x86_64
        run: cargo build --release --target x86_64-unknown-linux-musl
        env:
          CFLAGS: -D_FORTIFY_SOURCE=0
          CXXFLAGS: -D_FORTIFY_SOURCE=0
          CXX: x86_64-linux-gnu-g++

      - name: Move artifact to work dir and zip
        run: |
          mv target/x86_64-unknown-linux-musl/release/clewdr .
          mkdir -p release-package
          mv clewdr release-package/
          cd release-package
          zip -r ../clewdr-musllinux-x86_64 .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-musllinux-x86_64
          path: clewdr-musllinux-x86_64.zip
          retention-days: 1

  musllinux-aarch64:
    name: Build Linux aarch64 (musl)
    needs: build-frontend
    runs-on: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on Ubuntu ARM
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools musl-dev zip

      - name: Add Rust target
        run: |
          rustup target add aarch64-unknown-linux-musl
          rustup update

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build for aarch64
        run: cargo build --release --target aarch64-unknown-linux-musl
        env:
          CFLAGS: -D_FORTIFY_SOURCE=0
          CXXFLAGS: -D_FORTIFY_SOURCE=0

      - name: Move artifact to work dir and zip
        run: |
          mv target/aarch64-unknown-linux-musl/release/clewdr .
          mkdir -p release-package
          mv clewdr release-package/
          cd release-package
          zip -r ../clewdr-musllinux-aarch64 .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-musllinux-aarch64
          path: clewdr-musllinux-aarch64.zip
          retention-days: 1

  windows:
    name: Build Windows
    needs: build-frontend
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64
            target_triple: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on Windows
        run: |
          choco install cmake -y
          choco install strawberryperl -y
          choco install pkgconfiglite -y
          choco install llvm -y
          choco install nasm -y
        shell: cmd

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build on Windows with Static Linking
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Move artifact to work dir and zip
        run: |
          mkdir -p release-package
          mv target/${{ matrix.target_triple }}/release/clewdr.exe release-package/
          Compress-Archive -Path 'release-package\*' -DestinationPath "clewdr-windows-${{ matrix.target }}.zip" -CompressionLevel Optimal -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-windows-${{ matrix.target }}
          path: clewdr-windows-${{ matrix.target }}.zip
          retention-days: 1

  macos:
    name: Build macOS
    needs: build-frontend
    strategy:
      matrix:
        include:
          - target: x86_64
            runner: macos-latest
            target_triple: x86_64-apple-darwin
          - target: aarch64
            runner: macos-latest
            target_triple: aarch64-apple-darwin
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on macOS
        run: |
          brew update
          brew install --formula cmake pkg-config llvm

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Download static files
        uses: actions/download-artifact@v4
        with:
          name: static-files
          path: static

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Move artifact to work dir and zip
        run: |
          mv target/${{ matrix.target_triple }}/release/clewdr .
          mkdir -p release-package
          mv clewdr release-package/
          cd release-package
          zip -r ../clewdr-macos-${{ matrix.target }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-macos-${{ matrix.target }}
          path: clewdr-macos-${{ matrix.target }}.zip
          retention-days: 1
